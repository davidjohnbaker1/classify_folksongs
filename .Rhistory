## for phrase-wise output, compute ngram-features for each phrase and append phrase-wise summary features computed above
for(j in 1:(length(phrase.list)-1)){
#print(j)
phr.length <- length(phrase.list[[j+1]][,"pitch"])
if(phr.length <= phr.length.limits[1] | phr.length >= phr.length.limits[2]) {
if(j==1) next
ngram.phr.features <- data.frame(file.id,phr.id=j,mean.entropy=NA, mean.productivity=NA, mean.Simpsons.D=NA, mean.Yules.K=NA, mean.Sichels.S=NA, mean.Honores.H=NA)
phr.features <- rbind(phr.features,ngram.phr.features)}
else{
ngram.phr.features <- data.frame(file.id,phr.id=j, compute.features.from.ngram.table.main(n.grams.from.phrase(phrase.list[[j+1]])))
phr.features <- rbind(phr.features,ngram.phr.features)
}
}
phr.features.full <- rbind(phr.features.full,data.frame(phr.features,sum.feat))
#print(colnames(phr.features.full))
}
}
if(output=="melody.wise"){final.results <- mel.features}
else{final.results <- phr.features.full}
if(write.out==TRUE) {write.table(final.results,file="feature_computation.txt",sep="\t",row.names=FALSE)}
#cat("Number of files with non-positive increase in onset times:  ", no.non.pos.onset.files,"\n",sep=" ")
final.results
}
make.phrases.from.melody <- function(melody.filename,file.id) {
### Takes csv file with Grouper segmentation as input and outputs one csv file for each phrase ###
mel.data <- read.table(melody.filename,sep=";",dec=",",skip=1,header=TRUE)
mel.data <- mel.data[,1:15]
if(sum(mel.data$temperley)<1){
cat("csv file has no segmentation - please segment first","\n","\n",sep=" ")
line1 <- readLines(melody.filename)[1]
mel.list <- list(line1=line1)
mel.list[[paste("file",file.id,"single_phrase",sep="-")]] <- mel.data
}
else{
line1 <- readLines(melody.filename)[1]
boundaries <- which(mel.data$temperley==1)
start <- 1
mel.list <- list(line1=line1)
for(i in seq(along=boundaries)) {
end <- boundaries[i]
#print(mel.data[start:end,])
mel.list[[paste("file",file.id,"ph",i,sep="-")]] <- mel.data[start:end,]
start <- end+1
}
}
mel.list
}
compute.corpus.based.feature.frequencies <- function(analysis.melodies="analysis_dir",ana.dir="analysis_dir",corpus="corpus_dir",write.out.corp.freq=TRUE,comp.feat.use.seg=TRUE,comp.feat.output="phrase.wise") {
source("Frequencies_Summary_Statistics.R")
if((substring(analysis.melodies[1],nchar(analysis.melodies[1])-3,nchar(analysis.melodies[1])-3)) == ".") {
if((substring(analysis.melodies[1],nchar(analysis.melodies[1])-2,nchar(analysis.melodies[1]))) == "txt") {
sum.feature.dataframe <- read.table(analysis.melodies,sep="\t",header=TRUE)}
else{
sum.feature.dataframe <- compute.features(analysis.melodies,dir=ana.dir,output=comp.feat.output,use.segmentation=comp.feat.use.seg)}
}
else{
sum.feature.dataframe <- compute.features(dir=analysis.melodies,output=comp.feat.output,use.segmentation=comp.feat.use.seg)}
if(corpus[1]==analysis.melodies[1]){
sum.feature.dens.list <- compute.freqs.from.features(sum.feature.dataframe,returns="dens.list")
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)}
else{
if((substring(corpus[1],nchar(corpus)-3,nchar(corpus)-3)) != ".") {
sum.feature.dens.list <- compute.freqs.from.features(compute.features(dir=corpus,output=comp.feat.output,use.segmentation=comp.feat.use.seg),returns="dens.list")
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)}
else{
value <- try(read.table(file=corpus,header=TRUE,sep="\t"))
if(class(value) != "try-error") {
sum.feature.dens.list <- compute.freqs.from.features(value,returns="dens.list")
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)}			else{
load(corpus)
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)
}
}
}
if(write.out.corp.freq==TRUE) {
save(sum.feature.dens.list, file="feature_densities_list.txt")
write.table(densities.dataframe,file="densities_of_feature_values.txt",sep="\t",row.names=FALSE)}
else{}
densities.dataframe
}
compute.m.type.corpus.based.features <- function(analysis.melodies,ana.dir=".",corpus,corpus.dir="."){
source("M-Type_Corpus_Features.R")
#print(analysis.melodies)
if(ana.dir!=".") {
if(substr(ana.dir,1,1) != .Platform$file.sep) {
mel.fns <- file.path(getwd(),ana.dir,analysis.melodies)}
else{
mel.fns <- file.path(ana.dir,analysis.melodies)}
}
else{mel.fns <- list.files(pattern=".csv")}
if((corpus[1]==analysis.melodies[1]) && (ana.dir == corpus.dir)) {
corp.ngrams.tab <- n.grams.across.melodies(melody.filenames=mel.fns,n.lim=n.limits,phr.length.lim=phr.length.limits,write.out=TRUE)
}
else{
if(substr(corpus[1],nchar(corpus[1])-3,nchar(corpus[1]))==".txt") {
corp.ngrams.tab <- read.table(corpus,header=TRUE,sep="\t")}
else{corp.mel.fns <- file.path(corpus.dir,corpus)
corp.ngrams.tab <- n.grams.across.melodies(melody.filenames=corp.mel.fns,n.lim=n.limits,phr.length.lim=phr.length.limits,write.out=TRUE)}
}
corp.ngrams.tab.full <- corp.ngrams.tab
corp.ngrams.tab$count <- 1
file.id <- NULL
results <- NULL
for(i in seq(along=mel.fns)) {
fn.split <- strsplit(mel.fns[i],.Platform$file.sep)[[1]]
file.id[i] <- substring(fn.split[length(fn.split)],1,nchar(fn.split[length(fn.split)])-4)
print(file.id[i])
temp.results <- compute.stat.ngram.feat.from.melody(corp.ngrams.tab,corp.ngrams.tab.full,mel.fns[i])
results <- rbind(results,temp.results)
}
res.tab <- data.frame(file.id=file.id,results)
write.table(res.tab,file="mtype_corpus_based_features.txt",sep="\t",row.names=FALSE)
res.tab
}
feature.similarity <- function(mel.fns=list.files(path=dir,pattern=".csv"),dir=".",features=c("p.range","step.cont.glob.var","tonalness","d.eq.trans"),use.segmentation=FALSE,method="euclidean",eucl.stand=TRUE,corpus.dens.list.fn=NULL,average=TRUE){
source("Feature_Similarity.R")
require(cluster)
mel.feat <- compute.features(melody.filenames=mel.fns,dir=dir,output="melody.wise",use.segmentation=use.segmentation)
mel.feat.new <- as.data.frame(mel.feat[,features])
row.names(mel.feat.new) <- mel.feat[,"file.id"]
colnames(mel.feat.new) <- features
sim <- NULL
if(average==FALSE){
for(i in seq(along=features)){
sim[[paste(method,features[i],sep=".")]] <- compute.sim(mel.feat.new[,features[i]],features[i],row.names(mel.feat.new),method,eucl.stand,corpus.dens.list.fn)}
}
else{sim[["av.sim"]] <- compute.sim(mel.feat.new,features,row.names(mel.feat.new),method,eucl.stand,corpus.dens.list.fn) }
sim
}
compute.features()
list.files()
compute.features(melody.filenames = list.files(pattern=".csv"),
dir = ".",use.segmentation = FALSE,write.out = TRUE)
essenChinaFeatures <- compute.features(melody.filenames = list.files(pattern=".csv"),
dir = ".",use.segmentation = FALSE,write.out = TRUE)
fwrite(essenChinaFeatures, "EssenChinaFeatures.csv")
setwd("../../densmore_bin/csv/")
densmoreFeatures <- compute.features(melody.filenames = list.files(pattern=".csv"),
dir = ".",use.segmentation = FALSE,write.out = TRUE)
fwrite(densmoreFeatures,"desnmoreFeatures.csv")
library(psych)
pairs.panels(beer)
beer
pairs.panels(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
plotmatrix(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
library(ggplot2)
plotmatrix(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
pairs(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
pairs(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)], pch = '.')
cor(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
predict.overall <- lm(review_overall ~ review_aroma + review_appearance + review_palate + review_taste, data = beer)
summary(predict.overall)
predict.overall.occam <- lm(review_overall ~ review_palate + review_taste, data = beer)
summar(predict.overall.occam)
summary(predict.overall.occam)
plot(beer$review_overall)
hist(beer$review_overall)
hist(beer$review_aroma)
hist(beer$review_appearance)
hist(beer$review_palate)
hist(beer$review_taste)
beer[, .(apply(beer[ .(review_overall,review_aroma)],2,skew))]
apply(beer[ .(review_overall, review_aroma, review_appearance, review_palate, review_taste)],2, skew)
apply(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)],2, skew)
apply(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)],2, kurtosi)
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
library(data.table)
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
Sys.time(essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv"))
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
essenFeatures
setnames(essenFeatures,"file.id","folksong")
essenFeatures
essenFeatures[folksong == "deut",]
gsub(pattern = "[:numeric:]",replacement = "",essenFeatures$folksong)
gsub(pattern = "[:digit:]",replacement = "",essenFeatures$folksong)
gsub(pattern = [:digit:],replacement = "",essenFeatures$folksong)
gsub(pattern = "[:digit:]",replacement = "",essenFeatures$folksong)
str(essenFeatures)
gsub(pattern = [:digit:],replacement = "",essenFeatures$folksong)
gsub(pattern = "[:digit:]",replacement = "",essenFeatures$folksong)
gsub(pattern = "[[:digit:]]",replacement = "",essenFeatures$folksong)
essenFeatures[, Country := gsub(pattern = "[[:digit:]]",
replacement = "",
x = essenFeatures$folksong)]
str(essenFeatures)
deut <- essenFeatures[Country == "deut"]
deut
essenFeatures[, Country.ID := gsub(pattern = "[[:alpha:]]",
replacement = "",
x = essenFeatures$folksong)]
essenFeatures
essenFeatures[, Country.ID := gsub(pattern = "[[:alpha:]]",
replacement = "",
x = essenFeatures$folksong)]
deut <- essenFeatures[Country == "deut"]
deut[Coun]
deut[Country.ID >= 3663 & Country.ID <= 3772]
ifelse(test = deut[Country.ID >= 3663 & Country.ID <= 3772],
yes = "allerkbbd",
no = "NA")
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772, .(Region = "allerkbd")]
deut[Country.ID >= 3663 & Country.ID <= 3772, (Region = "allerkbd")]
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772] <- deut$Region
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772]$Region <- "allerkbd"
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut$Region <- NULL
deut
deut$Region <- "NA"
deut
deut[, .(Country.ID := as.numeric(Country.ID))]
deut[, .(Country.ID == as.numeric(Country.ID))]
deut
str(deut)
deut[, Country.ID == as.numeric(Country.ID)]
str(deut)
deut[, Country.ID := as.numeric(Country.ID)]
str(deut)
ifelse(test = deut[Country.ID >= 3663 & Country.ID <= 3772],
yes = "allerhbk",
no = deut)
ifelse(test = deut[Country.ID >= 3663 & Country.ID <= 3772],
yes = "allerhbk",
no = "NA")
ifelse(test = Country.ID >= 3663 & Country.ID <= 3772,
yes = "allerhbk",
no = "NA")
deut
ifelse(test = deut$Country.ID >= 3663 & deut$Country.ID <= 3772,
yes = "allerhbk",
no = "NA")
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772, Region == "allerkbd"]
deut[Country.ID >= 3663 & Country.ID <= 3772,]$Region <- "allerkbd"
deut
deut[Country.ID >= 3663  &  Country.ID <= 3772,]$Region <- "allerkbd"
deut[Country.ID >= 3773  &  Country.ID <= 4081,]$Region <- "altdeu1"
deut[Country.ID >= 4082  &  Country.ID <= 4397,]$Region <- "altdeu2"
deut[Country.ID >= 2976  &  Country.ID <= 3662,]$Region <- "ballad "
deut[Country.ID >= 2272  &  Country.ID <= 2975,]$Region <- "boehme "
deut[Country.ID >= 4398  &  Country.ID <= 4503,]$Region <- "dva"
deut[Country.ID >= 567  &  Country.ID <= 1629,]$Region <- "erk1"
deut[Country.ID >= 1630  &  Country.ID <= 2271,]$Region <- "erk2"
deut[Country.ID >= 1  &  Country.ID <= 566,]$Region <- "fink"
deut[Country.ID >= 5146  &  Country.ID <= 5157,]$Region <- "test"
deut[Country.ID >= 5120  &  Country.ID <= 5245,]$Region <- "variant"
deut[Country.ID >= 4504  &  Country.ID <= 5119,]$Region <- "zuccal"
deut
deut[, (.N), by = Region]
essenFeatures
essenFeatures$Region <- "NA"
deut <- essenFeatures[Country == "deut"]
deut[, Country.ID := as.numeric(Country.ID)]
deut[Country.ID >= 3663  &  Country.ID <= 3772,]$Region <- "allerkbd"
deut[Country.ID >= 3773  &  Country.ID <= 4081,]$Region <- "altdeu1"
deut[Country.ID >= 4082  &  Country.ID <= 4397,]$Region <- "altdeu2"
deut[Country.ID >= 2976  &  Country.ID <= 3662,]$Region <- "ballad "
deut[Country.ID >= 2272  &  Country.ID <= 2975,]$Region <- "boehme "
deut[Country.ID >= 4398  &  Country.ID <= 4503,]$Region <- "dva"
deut[Country.ID >= 567   &  Country.ID <= 1629,]$Region <- "erk1"
deut[Country.ID >= 1630  &  Country.ID <= 2271,]$Region <- "erk2"
deut[Country.ID >= 1     &  Country.ID <= 566,]$Region <-  "fink"
deut[Country.ID >= 5146  &  Country.ID <= 5157,]$Region <- "test"
deut[Country.ID >= 5120  &  Country.ID <= 5245,]$Region <- "variant"
deut[Country.ID >= 4504  &  Country.ID <= 5119,]$Region <- "zuccal"
deut[, (.N), by = Region]
essenFeatures[Country == "deut"] <- deut
essenFeatures
deut[, Country.ID := as.character(Country.ID)]
essenFeatures[Country == "deut"] <- deut
essenFeatures
essenFeatures[Country == "deut"]
essenFeatures[, (.N), by = Region]
densmoreFeatures
setnames(densmoreFeatures, "file.id","folksong")
densmoreFeatures[, Country := gsub(pattern = "[[:digit:]]",
replacement = "",
x = densmoreFeatures$folksong)]
densmoreFeatures
essenFeatures
library(data.table)
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
essenFeatures
setnames(essenFeatures,"file.id","folksong")
essenFeatures[, Country := gsub(pattern = "[[:digit:]]",
replacement = "",
x = essenFeatures$folksong)]
essenFeatures[, Country.ID := gsub(pattern = "[[:alpha:]]",
replacement = "",
x = essenFeatures$folksong)]
essenFeatures$Region <- "NA"
deut <- essenFeatures[Country == "deut"]
deut[, Country.ID := as.numeric(Country.ID)]
deut[Country.ID >= 3663  &  Country.ID <= 3772,]$Region <- "allerkbd"
deut[Country.ID >= 3773  &  Country.ID <= 4081,]$Region <- "altdeu1"
deut[Country.ID >= 4082  &  Country.ID <= 4397,]$Region <- "altdeu2"
deut[Country.ID >= 2976  &  Country.ID <= 3662,]$Region <- "ballad "
deut[Country.ID >= 2272  &  Country.ID <= 2975,]$Region <- "boehme "
deut[Country.ID >= 4398  &  Country.ID <= 4503,]$Region <- "dva"
deut[Country.ID >= 567   &  Country.ID <= 1629,]$Region <- "erk1"
deut[Country.ID >= 1630  &  Country.ID <= 2271,]$Region <- "erk2"
deut[Country.ID >= 1     &  Country.ID <= 566,]$Region <-  "fink"
deut[Country.ID >= 5146  &  Country.ID <= 5157,]$Region <- "test"
deut[Country.ID >= 5120  &  Country.ID <= 5245,]$Region <- "variant"
deut[Country.ID >= 4504  &  Country.ID <= 5119,]$Region <- "zuccal"
deut[, (.N), by = Region]
deut[, Country.ID := as.character(Country.ID)]
essenFeatures[Country == "deut"] <- deut
essenFeatures[, (.N), by = Region]
densmoreFeatures
setnames(densmoreFeatures, "file.id","folksong")
densmoreFeatures[, Country := gsub(pattern = "[[:digit:]]",
replacement = "",
x = densmoreFeatures$folksong)]
densmoreFeatures
essenFeatures
fwrite(densmoreFeatures,"data/feature_data/densmoreFeatures.csv")
fwrite(essenFeatures, "data/feature_data/essenFeatures.csv")
library(data.table)
library(ggplot2)
densmore <- fread("data/feature_data/densmoreFeatures.csv")
essen <- fread("data/feature_data/essenFeatures.csv")
densmore
ggplot(densmore, aes(x = mean.entropy, y = mean.productivity, color = Country)) + geom_point()
ggplot(densmore, aes(x = mean.entropy, y = d.entropy, color = Country)) + geom_point()
ggplot(densmore, aes(x = mean.entropy, y = tonal.clarity, color = Country)) + geom_point()
library(psych)
pairs.panels(densmore)
densmore
names(densmore)
densmore.numeric <- densmore[, .(mean.entropy,mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
densmore.numeric
get.FANTASTIC.numeric <- fucntion(x){
# Write all columns to object
y <- x[, (mean.entropy,mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
paste(x,".numeric") <<- y
}
get.FANTASTIC.numeric <- fucntion(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
paste(x,".numeric") <<- y
}
get.FANTASTIC.numeric <- fucntion(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
paste(x,".numeric") <<- y
}
get.FANTASTIC.numeric <- fucntion(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste(x,".numeric", y, envir = .GlobalEnv))
}
source('~/Desktop/projects/classify_folksongs/scripts/ExploratoryAnalysis.R', echo=TRUE)
get.FANTASTIC.numeric <- fucntion(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste(x,".numeric", y, envir = .GlobalEnv))
}
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste(x,".numeric", y, envir = .GlobalEnv))
}
get.FANTASTIC.numeric(essen)
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste(x,".numeric"), y, envir = .GlobalEnv)
}
get.FANTASTIC.numeric(essen)
paste(densmore,".numeric")
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste("x",".numeric"), y, envir = .GlobalEnv)
}
get.FANTASTIC.numeric(essen)
densmore <- fread("data/feature_data/densmoreFeatures.csv")
essen <- fread("data/feature_data/essenFeatures.csv")
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(cat(paste(x,".numeric")), y, envir = .GlobalEnv)
}
get.FANTASTIC.numeric(densmore)
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste(x,".numeric"), y, envir = .GlobalEnv)
}
deparse(substitute(densmore))
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste(deparse(substitute(x)),".numeric"), y, envir = .GlobalEnv)
}
get.FANTASTIC.numeric(densmore)
View(`densmore .numeric`)
densmore <- fread("data/feature_data/densmoreFeatures.csv")
essen <- fread("data/feature_data/essenFeatures.csv")
get.FANTASTIC.numeric <- function(x){
# Write all columns to object
y <- x[, .(mean.entropy, mean.productivity,mean.Simpsons.D,mean.Yules.K,mean.Sichels.S,
mean.Honores.H,p.range,p.entropy,p.std,i.abs.range,i.abs.mean,
i.abs.std,i.mode,i.entropy,d.range,d.median,d.mode,
d.entropy,d.eq.trans,d.half.trans,d.dotted.trans,len,glob.duration,
note.dens,tonalness,tonal.clarity,tonal.spike,int.cont.grad.mean,int.cont.grad.std,
int.cont.dir.change,step.cont.glob.var,step.cont.glob.dir,step.cont.loc.var)]
# Write to Global Environment
assign(paste0(deparse(substitute(x)),".numeric"), y, envir = .GlobalEnv)
}
get.FANTASTIC.numeric(densmore)
get.FANTASTIC.numeric(essen)
KMO(densmore.numeric)
densmore.all.item <- fa(densmore.numeric, nfactors = ncol(densmore.numeric), rotate = "none")
plot(densmore.all.item$values)
plot(densmore.all.item$values,
main = "Eigen Values for All Item Model for Densmore Collection",
x = "Number of Factors",
y = "Eigen Values")
plot(densmore.all.item$values,
main = "Eigen Values for All Item Model for Densmore Collection",
xlab = "Number of Factors",
ylab = "Eigen Values")
plot(densmore.all.item$values,
main = "Eigen Values for All Item Model for Densmore Collection",
xlab = "Number of Factors",
ylab = "Eigen Values",
abline = 1)
abline(h = 1)
fa.parallel(densmore.numeric)
warnings()
fa.parallel(densmore.numeric)
densmore.nine.factor <- fa(densmore.numeric, nfactors = 9, rotate = "none")
densmore.nine.factor <- fa(densmore.numeric, nfactors = 7, rotate = "none")
