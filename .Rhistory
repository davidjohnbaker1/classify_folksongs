library(data.table)
setwd("data/")
essen <- fread("EssenFeatures.csv")
essen
attach(essen)
class(file.id)
unique(file.id)
library(stringr)
str_replace_all(string = file.id, pattern = "[:digit:]", replacement = "" )
essen$country <- str_replace_all(string = file.id, pattern = "[:digit:]", replacement = "" )
table(country)
table(essen$country)
rnow(essen)
rnows(essen)
nrows(essen)
nrow(essen)
open(http://kern.humdrum.org/cgi-bin/browse?l=/)
open("http://kern.humdrum.org/cgi-bin/browse?l=/")
table(essen$country)
beer <- fread("~/Desktop/beerproject/beer_reviews/beer_reviews.csv")
library(ggplot2)
library(data.table)
beer <- fread("~/Desktop/beerproject/beer_reviews/beer_reviews.csv")
beer
names(beer)
unique(beer$brewery_name)
table(unique(beer$brewery_name))
beer[, .(.N = unique(beer$brewery_name))]
beer[, .(.N = unique(beer$review_profilename))]
beer[, .(.N = unique(beer$beer_name))]
beer[, .(.N = unique(beer$beer_style))]
beer
beer[, .(N. = unique(beer$review_overall))]
complete.cases(beer)
beer[969]
table(complete.cases(beer))
67785/1518829
beer[complete.cases(beer)]
beer[!complete.cases(beer)]
beer[!complete.cases(beer)][, .(N = beer_name)]
beer[!complete.cases(beer)][, .(N = uniqu(beer_name))]
beer[!complete.cases(beer)][, .(N = unique(beer_name))]
beer[, .(.N = unique(beer$beer_name))]
14110/56857
14110/56857
67785/1518829
table(complete.cases(beer))
beer.complete <- beer[complete.cases(beer)]
beer.complete[, .(AvgABV = mean(beer_abv)), by = brewery_name]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name]
beer.complete[, .(AvgABV = mean(beer_abv)), by = brewery_name][sort(AvgABV)]
beer.complete[, .(AvgABV = mean(beer_abv)), by = brewery_name]
breweryABV <- beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name]
beer.complete[, .(AvgABV = mean(beer_abv)), by = brewery_name][order(AvgABV)]
beer.complete[, .(AvgABV = mean(beer_abv)), by = brewery_name][order(-AvgABV)]
breweryABV <- beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV)]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV)]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV,-SdABV)]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV,SdABV)]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV)]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV)]
beer[!complete.cases(beer)][, .(.N = unique(beer_name))]
beer[, .(N = unique(beer_name)), by = brewery_name]
beer[, .(N = unique(beer_name))]
beer[, .(N = unique(beer_name)), by = brewery_name]
beer[, .(.N = unique(beer_name)), by = brewery_name]
beer[, .(NameOfBeer = unique(beer_name)), by = brewery_name]
beer[, .(NameOfBeer = unique(beer_name)), by = brewery_name][, .(.N), by = brewery_name]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv), NumberBeers =  ), by = brewery_name][order(-AvgABV)]
beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)), by = brewery_name][order(-AvgABV)]
beer[, .(NameOfBeer = unique(beer_name)), by = brewery_name][, .(.N), by = brewery_name]
NoOfBeers <- beer[, .(NameOfBeer = unique(beer_name)), by = brewery_name][, .(.N), by = brewery_name]
beer.complete[, .(AvgABV = mean(beer_abv),
SdABV = sd(beer_abv))
, by = brewery_name][order(-AvgABV)]
abv.counter <- beer.complete[, .(AvgABV = mean(beer_abv), SdABV = sd(beer_abv)) , by = brewery_name][order(-AvgABV)]
NoOfBeers <- beer[, .(NameOfBeer = unique(beer_name)), by = brewery_name][, .(.N), by = brewery_name]
NoOfBeers
NoOfBeers <- beer.complete[, .(NameOfBeer = unique(beer_name)), by = brewery_name][, .(.N), by = brewery_name]
NoOfBeers
NoOfBeers
abv.counter
NoOfBeers[abv.counter, on = brewery_name]
NoOfBeers[abv.counter, on = "brewery_name"]
abv.table <- NoOfBeers[abv.counter, on = "brewery_name"]
abv.table[order(-AvgABV)]
abv.table[N > 10 ,order(-AvgABV)]
abv.table[N > 10 ,order(-AvgABV)]
abv.table[order(-AvgABV)]
abv.table[N > 10][order(-AvgABV)]
abv.table[N > 4][order(-AvgABV)]
abv.table[N > 6][order(-AvgABV)]
abv.table[N > 6][order(-AvgABV, SdABV)]
abv.table[N > 6][order(-AvgABV)][order(SdABV)]
abv.table[N > 6][order(-AvgABV)]
abv.table[N > 6][order(c(-AvgABV,SdABV)]
abv.table[N > 6][order(c(-AvgABV,SdABV))]
abv.table[N > 6][order(AvgABV)]
abv.table[N > 6][order(-AvgABV)]
NoOfBeers
hist(NoOfBeers)
hist(NoOfBeers$N)
NoOfBeers[N > 100]
abv.table[N > 6][order(-AvgABV)]
abv.table[N > 6, zAvgABV = scale(AvgABV)][order(-AvgABV)]
abv.table[N > 6, .(zAvgABV = scale(AvgABV))][order(-AvgABV)]
abv.table
abv.table[, zAvgABV := scale(AvgABV)]
abv.table[N > 6, ][order(-AvgABV)]
abv.table[N > 6, ][order(-AvgABV)]
abv.table[N >= 5, ][order(-AvgABV)]
hist(abv.table[N >= 5, ][order(-AvgABV)]$zAvgABV)
abv.table[N >= 5 && zAvgABV > 4, ][order(-AvgABV)]
abv.table[N >= 5 & zAvgABV > 4, ][order(-AvgABV)]
beer
source('~/Desktop/projects/classify_folksongs/data/krn/essen_bin/csv/Fantastic.R', encoding = 'UTF-8', echo=TRUE)
setwd("data/krn/essen_bin/csv/")
source('~/Desktop/projects/classify_folksongs/data/krn/essen_bin/csv/Fantastic.R', encoding = 'UTF-8', echo=TRUE)
###############################################################
###### Fantastic: A program for Melodic Feature Analysis ######
######                  Daniel MÃ¼llensiefen              ######
######               Version: 1.0, May 2009            ######
###############################################################
############################
##### Global Parameters ####
############################
#### Limits of phrase length, in number of notes
phr.length.limits <- c(2,24)
#### Assignment scheme for intervals in semitones to interval classes as 2 digits sequences of letters and numbers
int.class.scheme <- data.frame(raw.int=c(-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12), class.int=c("d8","d7","d7","d6","d6","d5","dt","d4","d3","d3","d2","d2","s1","u2","u2","u3","u3","u4","ut","u5","u6","u6","u7","u7","u8"))
#### Assignement scheme for time ratios to relative rhythm classes ("quicker", "equal", "longer").
tr.class.scheme <- list(class.symbols=c("q","e","l"), upper.limits=c(0.8118987,1.4945858))
#### Limits for m-term lengths to be used for analysis, in number of notes
n.limits <- c(1,5)
source("Feature_Value_Summary_Statistics.R")
source("M-Type_Summary_Statistics.R")
compute.features <- function(melody.filenames=list.files(path=dir,pattern=".csv"),dir=".",output="melody.wise", use.segmentation=TRUE, write.out=FALSE) {
if(output!="melody.wise" & use.segmentation==FALSE) {
print("Usage error: use.segmentation must be TRUE if phrase-wise output is requested")
return(NA)}
mel.features <- NULL
phr.features.full <- NULL
no.non.pos.onset.files <- 0
if(dir!=".") {
#melody.filenames <- list.files(path=dir,pattern=".csv")
if(substr(dir,1,1) != .Platform$file.sep) {melody.filenames <- file.path(getwd(),dir,melody.filenames)}
else{
tmp.fns <- sapply(melody.filenames, function(x) strsplit(x,.Platform$file.sep)[[1]][length(strsplit(x,.Platform$file.sep)[[1]])])
melody.filenames <- file.path(dir,tmp.fns)
}
}
else{
if(substr(melody.filenames[1],1,1) != .Platform$file.sep) {
melody.filenames <- file.path(getwd(),melody.filenames)}
else{melody.filenames <- melody.filenames}}
for(i in seq(along=melody.filenames)) {
fn <- unlist(strsplit(melody.filenames[i],"/"))
file.id <- substr(fn[length(fn)],1,nchar(fn[length(fn)])-4)
print(file.id)
tonsets <- read.table(melody.filenames[i],sep=";",dec=",",skip=1,header=TRUE)[,"onset"]
if(length(tonsets) < 2) next
if(any((tonsets[2:length(tonsets)]-tonsets[1:(length(tonsets)-1)])<0)) {
no.non.pos.onset.files <- no.non.pos.onset.files + 1
print("Onsets not  monotonically positive")}
if(any((tonsets[2:length(tonsets)]-tonsets[1:(length(tonsets)-1)])<0)) next
sum.feat <- NULL
phr.features <- NULL
if(use.segmentation=="TRUE") {
phrase.list <- make.phrases.from.melody(melody.filenames[i],file.id)
for(j in 1:(length(phrase.list)-1)){
## compute summary features phrase-wise
phr.length <- length(phrase.list[[j+1]][,"pitch"])
if(phr.length <= phr.length.limits[1] | phr.length >= phr.length.limits[2]) {
if(j==1) next
summary.features <- matrix(NA,1,length(colnames(summary.features)),dimnames=list((j),colnames(summary.features)))
sum.feat <- rbind(sum.feat,summary.features)}
else{
summary.features <- summary.phr.features(phrase.list[[j+1]])
sum.feat <- rbind(sum.feat,summary.features)
}
}
}
else{
mel.data <- read.table(melody.filenames[i],sep=";",dec=",",skip=1,header=TRUE)
mel.data <- mel.data[,1:15]
summary.features <- summary.phr.features(mel.data,poly.contour=FALSE)
sum.feat <- rbind(sum.feat,summary.features)
}
if(output=="melody.wise") {
## for melody-wise output, average summary-features over phrases (there is only 1 phrase if segmentation is not requested) and compute ngram-features over entire melody
ngram.mel.features <- data.frame(file.id,compute.features.from.ngram.table.main(n.grams.from.melody.main(melody.filenames[i])))
#m.Z <- compute.zipfs.z(n.grams.from.melody.main(melody.filenames[i]))
factors <- which(sapply(sum.feat,is.factor))
m.sum.feat <- matrix(apply(sum.feat[,-factors],2, function(x) mean(x,na.rm=TRUE)),nrow=1,ncol=length(colnames(sum.feat)[-factors]),dimnames=list(i,colnames(sum.feat)[-factors]))
m.freq.sum.feat <- matrix(apply(sum.feat[,factors],2, function(x) names(which(table(x)==max(table(x)))[1])), nrow=1,ncol=length(colnames(sum.feat)[factors]),dimnames=list(i,colnames(sum.feat)[factors]))
mel.features <- rbind(mel.features,data.frame(ngram.mel.features,m.sum.feat,m.freq.sum.feat))
}
else{
## for phrase-wise output, compute ngram-features for each phrase and append phrase-wise summary features computed above
for(j in 1:(length(phrase.list)-1)){
#print(j)
phr.length <- length(phrase.list[[j+1]][,"pitch"])
if(phr.length <= phr.length.limits[1] | phr.length >= phr.length.limits[2]) {
if(j==1) next
ngram.phr.features <- data.frame(file.id,phr.id=j,mean.entropy=NA, mean.productivity=NA, mean.Simpsons.D=NA, mean.Yules.K=NA, mean.Sichels.S=NA, mean.Honores.H=NA)
phr.features <- rbind(phr.features,ngram.phr.features)}
else{
ngram.phr.features <- data.frame(file.id,phr.id=j, compute.features.from.ngram.table.main(n.grams.from.phrase(phrase.list[[j+1]])))
phr.features <- rbind(phr.features,ngram.phr.features)
}
}
phr.features.full <- rbind(phr.features.full,data.frame(phr.features,sum.feat))
#print(colnames(phr.features.full))
}
}
if(output=="melody.wise"){final.results <- mel.features}
else{final.results <- phr.features.full}
if(write.out==TRUE) {write.table(final.results,file="feature_computation.txt",sep="\t",row.names=FALSE)}
#cat("Number of files with non-positive increase in onset times:  ", no.non.pos.onset.files,"\n",sep=" ")
final.results
}
make.phrases.from.melody <- function(melody.filename,file.id) {
### Takes csv file with Grouper segmentation as input and outputs one csv file for each phrase ###
mel.data <- read.table(melody.filename,sep=";",dec=",",skip=1,header=TRUE)
mel.data <- mel.data[,1:15]
if(sum(mel.data$temperley)<1){
cat("csv file has no segmentation - please segment first","\n","\n",sep=" ")
line1 <- readLines(melody.filename)[1]
mel.list <- list(line1=line1)
mel.list[[paste("file",file.id,"single_phrase",sep="-")]] <- mel.data
}
else{
line1 <- readLines(melody.filename)[1]
boundaries <- which(mel.data$temperley==1)
start <- 1
mel.list <- list(line1=line1)
for(i in seq(along=boundaries)) {
end <- boundaries[i]
#print(mel.data[start:end,])
mel.list[[paste("file",file.id,"ph",i,sep="-")]] <- mel.data[start:end,]
start <- end+1
}
}
mel.list
}
compute.corpus.based.feature.frequencies <- function(analysis.melodies="analysis_dir",ana.dir="analysis_dir",corpus="corpus_dir",write.out.corp.freq=TRUE,comp.feat.use.seg=TRUE,comp.feat.output="phrase.wise") {
source("Frequencies_Summary_Statistics.R")
if((substring(analysis.melodies[1],nchar(analysis.melodies[1])-3,nchar(analysis.melodies[1])-3)) == ".") {
if((substring(analysis.melodies[1],nchar(analysis.melodies[1])-2,nchar(analysis.melodies[1]))) == "txt") {
sum.feature.dataframe <- read.table(analysis.melodies,sep="\t",header=TRUE)}
else{
sum.feature.dataframe <- compute.features(analysis.melodies,dir=ana.dir,output=comp.feat.output,use.segmentation=comp.feat.use.seg)}
}
else{
sum.feature.dataframe <- compute.features(dir=analysis.melodies,output=comp.feat.output,use.segmentation=comp.feat.use.seg)}
if(corpus[1]==analysis.melodies[1]){
sum.feature.dens.list <- compute.freqs.from.features(sum.feature.dataframe,returns="dens.list")
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)}
else{
if((substring(corpus[1],nchar(corpus)-3,nchar(corpus)-3)) != ".") {
sum.feature.dens.list <- compute.freqs.from.features(compute.features(dir=corpus,output=comp.feat.output,use.segmentation=comp.feat.use.seg),returns="dens.list")
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)}
else{
value <- try(read.table(file=corpus,header=TRUE,sep="\t"))
if(class(value) != "try-error") {
sum.feature.dens.list <- compute.freqs.from.features(value,returns="dens.list")
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)}			else{
load(corpus)
densities.dataframe <- compute.freqs.from.features(sum.feature.dataframe,takes=sum.feature.dens.list)
}
}
}
if(write.out.corp.freq==TRUE) {
save(sum.feature.dens.list, file="feature_densities_list.txt")
write.table(densities.dataframe,file="densities_of_feature_values.txt",sep="\t",row.names=FALSE)}
else{}
densities.dataframe
}
compute.m.type.corpus.based.features <- function(analysis.melodies,ana.dir=".",corpus,corpus.dir="."){
source("M-Type_Corpus_Features.R")
#print(analysis.melodies)
if(ana.dir!=".") {
if(substr(ana.dir,1,1) != .Platform$file.sep) {
mel.fns <- file.path(getwd(),ana.dir,analysis.melodies)}
else{
mel.fns <- file.path(ana.dir,analysis.melodies)}
}
else{mel.fns <- list.files(pattern=".csv")}
if((corpus[1]==analysis.melodies[1]) && (ana.dir == corpus.dir)) {
corp.ngrams.tab <- n.grams.across.melodies(melody.filenames=mel.fns,n.lim=n.limits,phr.length.lim=phr.length.limits,write.out=TRUE)
}
else{
if(substr(corpus[1],nchar(corpus[1])-3,nchar(corpus[1]))==".txt") {
corp.ngrams.tab <- read.table(corpus,header=TRUE,sep="\t")}
else{corp.mel.fns <- file.path(corpus.dir,corpus)
corp.ngrams.tab <- n.grams.across.melodies(melody.filenames=corp.mel.fns,n.lim=n.limits,phr.length.lim=phr.length.limits,write.out=TRUE)}
}
corp.ngrams.tab.full <- corp.ngrams.tab
corp.ngrams.tab$count <- 1
file.id <- NULL
results <- NULL
for(i in seq(along=mel.fns)) {
fn.split <- strsplit(mel.fns[i],.Platform$file.sep)[[1]]
file.id[i] <- substring(fn.split[length(fn.split)],1,nchar(fn.split[length(fn.split)])-4)
print(file.id[i])
temp.results <- compute.stat.ngram.feat.from.melody(corp.ngrams.tab,corp.ngrams.tab.full,mel.fns[i])
results <- rbind(results,temp.results)
}
res.tab <- data.frame(file.id=file.id,results)
write.table(res.tab,file="mtype_corpus_based_features.txt",sep="\t",row.names=FALSE)
res.tab
}
feature.similarity <- function(mel.fns=list.files(path=dir,pattern=".csv"),dir=".",features=c("p.range","step.cont.glob.var","tonalness","d.eq.trans"),use.segmentation=FALSE,method="euclidean",eucl.stand=TRUE,corpus.dens.list.fn=NULL,average=TRUE){
source("Feature_Similarity.R")
require(cluster)
mel.feat <- compute.features(melody.filenames=mel.fns,dir=dir,output="melody.wise",use.segmentation=use.segmentation)
mel.feat.new <- as.data.frame(mel.feat[,features])
row.names(mel.feat.new) <- mel.feat[,"file.id"]
colnames(mel.feat.new) <- features
sim <- NULL
if(average==FALSE){
for(i in seq(along=features)){
sim[[paste(method,features[i],sep=".")]] <- compute.sim(mel.feat.new[,features[i]],features[i],row.names(mel.feat.new),method,eucl.stand,corpus.dens.list.fn)}
}
else{sim[["av.sim"]] <- compute.sim(mel.feat.new,features,row.names(mel.feat.new),method,eucl.stand,corpus.dens.list.fn) }
sim
}
compute.features()
list.files()
compute.features(melody.filenames = list.files(pattern=".csv"),
dir = ".",use.segmentation = FALSE,write.out = TRUE)
essenChinaFeatures <- compute.features(melody.filenames = list.files(pattern=".csv"),
dir = ".",use.segmentation = FALSE,write.out = TRUE)
fwrite(essenChinaFeatures, "EssenChinaFeatures.csv")
setwd("../../densmore_bin/csv/")
densmoreFeatures <- compute.features(melody.filenames = list.files(pattern=".csv"),
dir = ".",use.segmentation = FALSE,write.out = TRUE)
fwrite(densmoreFeatures,"desnmoreFeatures.csv")
library(psych)
pairs.panels(beer)
beer
pairs.panels(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
plotmatrix(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
library(ggplot2)
plotmatrix(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
pairs(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
pairs(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)], pch = '.')
cor(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)])
predict.overall <- lm(review_overall ~ review_aroma + review_appearance + review_palate + review_taste, data = beer)
summary(predict.overall)
predict.overall.occam <- lm(review_overall ~ review_palate + review_taste, data = beer)
summar(predict.overall.occam)
summary(predict.overall.occam)
plot(beer$review_overall)
hist(beer$review_overall)
hist(beer$review_aroma)
hist(beer$review_appearance)
hist(beer$review_palate)
hist(beer$review_taste)
beer[, .(apply(beer[ .(review_overall,review_aroma)],2,skew))]
apply(beer[ .(review_overall, review_aroma, review_appearance, review_palate, review_taste)],2, skew)
apply(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)],2, skew)
apply(beer[, .(review_overall, review_aroma, review_appearance, review_palate, review_taste)],2, kurtosi)
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
library(data.table)
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
Sys.time(essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv"))
essenFeatures <- fread("data/feature_data/EssenChinaFeatures.csv")
densmoreFeatures <- fread("data/feature_data/desnmoreFeatures.csv")
essenFeatures
setnames(essenFeatures,"file.id","folksong")
essenFeatures
essenFeatures[folksong == "deut",]
gsub(pattern = "[:numeric:]",replacement = "",essenFeatures$folksong)
gsub(pattern = "[:digit:]",replacement = "",essenFeatures$folksong)
gsub(pattern = [:digit:],replacement = "",essenFeatures$folksong)
gsub(pattern = "[:digit:]",replacement = "",essenFeatures$folksong)
str(essenFeatures)
gsub(pattern = [:digit:],replacement = "",essenFeatures$folksong)
gsub(pattern = "[:digit:]",replacement = "",essenFeatures$folksong)
gsub(pattern = "[[:digit:]]",replacement = "",essenFeatures$folksong)
essenFeatures[, Country := gsub(pattern = "[[:digit:]]",
replacement = "",
x = essenFeatures$folksong)]
str(essenFeatures)
deut <- essenFeatures[Country == "deut"]
deut
essenFeatures[, Country.ID := gsub(pattern = "[[:alpha:]]",
replacement = "",
x = essenFeatures$folksong)]
essenFeatures
essenFeatures[, Country.ID := gsub(pattern = "[[:alpha:]]",
replacement = "",
x = essenFeatures$folksong)]
deut <- essenFeatures[Country == "deut"]
deut[Coun]
deut[Country.ID >= 3663 & Country.ID <= 3772]
ifelse(test = deut[Country.ID >= 3663 & Country.ID <= 3772],
yes = "allerkbbd",
no = "NA")
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772, .(Region = "allerkbd")]
deut[Country.ID >= 3663 & Country.ID <= 3772, (Region = "allerkbd")]
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772] <- deut$Region
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772]$Region <- "allerkbd"
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut$Region <- NULL
deut
deut$Region <- "NA"
deut
deut[, .(Country.ID := as.numeric(Country.ID))]
deut[, .(Country.ID == as.numeric(Country.ID))]
deut
str(deut)
deut[, Country.ID == as.numeric(Country.ID)]
str(deut)
deut[, Country.ID := as.numeric(Country.ID)]
str(deut)
ifelse(test = deut[Country.ID >= 3663 & Country.ID <= 3772],
yes = "allerhbk",
no = deut)
ifelse(test = deut[Country.ID >= 3663 & Country.ID <= 3772],
yes = "allerhbk",
no = "NA")
ifelse(test = Country.ID >= 3663 & Country.ID <= 3772,
yes = "allerhbk",
no = "NA")
deut
ifelse(test = deut$Country.ID >= 3663 & deut$Country.ID <= 3772,
yes = "allerhbk",
no = "NA")
deut[Country.ID >= 3663 & Country.ID <= 3772]
deut[Country.ID >= 3663 & Country.ID <= 3772, Region == "allerkbd"]
deut[Country.ID >= 3663 & Country.ID <= 3772,]$Region <- "allerkbd"
deut
deut[Country.ID >= 3663  &  Country.ID <= 3772,]$Region <- "allerkbd"
deut[Country.ID >= 3773  &  Country.ID <= 4081,]$Region <- "altdeu1"
deut[Country.ID >= 4082  &  Country.ID <= 4397,]$Region <- "altdeu2"
deut[Country.ID >= 2976  &  Country.ID <= 3662,]$Region <- "ballad "
deut[Country.ID >= 2272  &  Country.ID <= 2975,]$Region <- "boehme "
deut[Country.ID >= 4398  &  Country.ID <= 4503,]$Region <- "dva"
deut[Country.ID >= 567  &  Country.ID <= 1629,]$Region <- "erk1"
deut[Country.ID >= 1630  &  Country.ID <= 2271,]$Region <- "erk2"
deut[Country.ID >= 1  &  Country.ID <= 566,]$Region <- "fink"
deut[Country.ID >= 5146  &  Country.ID <= 5157,]$Region <- "test"
deut[Country.ID >= 5120  &  Country.ID <= 5245,]$Region <- "variant"
deut[Country.ID >= 4504  &  Country.ID <= 5119,]$Region <- "zuccal"
deut
deut[, (.N), by = Region]
essenFeatures
essenFeatures$Region <- "NA"
deut <- essenFeatures[Country == "deut"]
deut[, Country.ID := as.numeric(Country.ID)]
deut[Country.ID >= 3663  &  Country.ID <= 3772,]$Region <- "allerkbd"
deut[Country.ID >= 3773  &  Country.ID <= 4081,]$Region <- "altdeu1"
deut[Country.ID >= 4082  &  Country.ID <= 4397,]$Region <- "altdeu2"
deut[Country.ID >= 2976  &  Country.ID <= 3662,]$Region <- "ballad "
deut[Country.ID >= 2272  &  Country.ID <= 2975,]$Region <- "boehme "
deut[Country.ID >= 4398  &  Country.ID <= 4503,]$Region <- "dva"
deut[Country.ID >= 567   &  Country.ID <= 1629,]$Region <- "erk1"
deut[Country.ID >= 1630  &  Country.ID <= 2271,]$Region <- "erk2"
deut[Country.ID >= 1     &  Country.ID <= 566,]$Region <-  "fink"
deut[Country.ID >= 5146  &  Country.ID <= 5157,]$Region <- "test"
deut[Country.ID >= 5120  &  Country.ID <= 5245,]$Region <- "variant"
deut[Country.ID >= 4504  &  Country.ID <= 5119,]$Region <- "zuccal"
deut[, (.N), by = Region]
essenFeatures[Country == "deut"] <- deut
essenFeatures
deut[, Country.ID := as.character(Country.ID)]
essenFeatures[Country == "deut"] <- deut
essenFeatures
essenFeatures[Country == "deut"]
essenFeatures[, (.N), by = Region]
densmoreFeatures
setnames(densmoreFeatures, "file.id","folksong")
densmoreFeatures[, Country := gsub(pattern = "[[:digit:]]",
replacement = "",
x = densmoreFeatures$folksong)]
densmoreFeatures
essenFeatures
